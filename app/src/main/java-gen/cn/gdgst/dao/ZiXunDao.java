package cn.gdgst.dao;

import android.database.Cursor;

import cn.gdgst.entity.ZiXun;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "activity_zixun_list".
*/
public class ZiXunDao extends AbstractDao<ZiXun, Long> {

    public static final String TABLENAME = "activity_zixun_list";

    /**
     * Properties of entity ZiXun.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Gid = new Property(1, String.class, "gid", false, "GID");
        public final static Property Pid = new Property(2, String.class, "pid", false, "PID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Img_url = new Property(4, String.class, "img_url", false, "IMG_URL");
        public final static Property Img_url_s = new Property(5, String.class, "img_url_s", false, "IMG_URL_S");
        public final static Property Video_url = new Property(6, String.class, "video_url", false, "VIDEO_URL");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
        public final static Property Time = new Property(8, String.class, "time", false, "TIME");
    };


    public ZiXunDao(DaoConfig config) {
        super(config);
    }
    
    public ZiXunDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"activity_zixun_list\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"GID\" TEXT," + // 1: gid
                "\"PID\" TEXT," + // 2: pid
                "\"TITLE\" TEXT," + // 3: title
                "\"IMG_URL\" TEXT," + // 4: img_url
                "\"IMG_URL_S\" TEXT," + // 5: img_url_s
                "\"VIDEO_URL\" TEXT," + // 6: video_url
                "\"CONTENT\" TEXT," + // 7: content
                "\"TIME\" TEXT);"); // 8: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"activity_zixun_list\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, ZiXun entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gid = entity.getGid();
        if (gid != null) {
            stmt.bindString(2, gid);
        }
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(3, pid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String img_url = entity.getImg_url();
        if (img_url != null) {
            stmt.bindString(5, img_url);
        }
 
        String img_url_s = entity.getImg_url_s();
        if (img_url_s != null) {
            stmt.bindString(6, img_url_s);
        }
 
        String video_url = entity.getVideo_url();
        if (video_url != null) {
            stmt.bindString(7, video_url);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ZiXun readEntity(Cursor cursor, int offset) {
        ZiXun entity = new ZiXun( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // img_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // img_url_s
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // video_url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // content
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ZiXun entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImg_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImg_url_s(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVideo_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ZiXun entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ZiXun entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
